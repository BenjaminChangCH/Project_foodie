# 步驟 2.1：建立一個簡易的食物營養資料庫
# 我們使用 Python 的「字典 (dictionary)」來儲存這些資料。
# 字典的格式是 { "鍵": "值", "另一個鍵": "另一個值" }
# 在這裡，食物名稱是「鍵」，對應的營養資訊 (本身也是一個字典) 是「值」。
food_database = {
    "蘋果": {"熱量": 52, "蛋白質": 0.3, "碳水": 14, "脂肪": 0.2},
    "雞胸肉": {"熱量": 165, "蛋白質": 31, "碳水": 0, "脂肪": 3.6},
    "白飯": {"熱量": 130, "蛋白質": 2.7, "碳水": 28, "脂肪": 0.3},
    "香蕉": {"熱量": 89, "蛋白質": 1.1, "碳水": 23, "脂肪": 0.3} # 您可以試著自己多加幾種
}

# 步驟 2.2：從使用者那裡獲取輸入
# input() 函數會顯示括號中的文字給使用者看，然後等待使用者輸入內容。
# 使用者輸入的內容會被存到 user_food 這個變數中。
user_food = input("請輸入你想查詢的食物名稱 (例如：蘋果, 雞胸肉, 白飯, 香蕉): ")

# 步驟 2.3：檢查食物是否存在於資料庫中，並顯示結果
# "if user_food in food_database:" 的意思是「如果使用者輸入的食物 在 食物資料庫的鍵裡面」
if user_food in food_database:
    # 如果找到了，就從 food_database 中取出該食物對應的營養資訊
    nutrition_info = food_database[user_food]

    # 使用 f-string 來格式化並印出資訊
    print(f"\n--- {user_food} (每100克) ---") # \n 代表換行
    print(f"熱量: {nutrition_info['熱量']} 大卡")
    print(f"蛋白質: {nutrition_info['蛋白質']} 克")
    print(f"碳水化合物: {nutrition_info['碳水']} 克")
    print(f"脂肪: {nutrition_info['脂肪']} 克")
else:
    # 如果在 food_database 中找不到使用者輸入的食物
    print(f"\n抱歉，我們的資料庫中目前沒有 '{user_food}' 的營養資訊。")

print("\n感謝使用簡易營養查詢程式！") # 最後加一句話